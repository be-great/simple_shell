void None_interactive(error_h_t *error_info)
{
	char *line = NULL;

	size_t len = 0;
	ssize_t read;

	while (1)
	{
		read = getline(&line, &len, stdin);
		if (read == -1)
		{
			/* Check for end of file */
			if (feof(stdin))
			{
				break;
			}
			else
			{
				perror("getline");
				free(line);
				exit(EXIT_FAILURE);
			}
		}
			/*-----------remove the comment*/
			if (read > 0)
				rm_comments(line, &read);
			/*-------------------------------*/
			if (is_empty_or_whitespace(line))
			{
				/* Skip processing for empty/whitespace lines */
				continue;
			}
			processes(line, error_info);
			if (error_info->status != 0)
			{
				free(line), exit(error_info->status);
			}
	}
	free(line);
}

this part :-
if (error_info->status != 0)
			{
				free(line), exit(error_info->status);
			}
make the second command not execute :-
echo -e "fsdfsdf\necho $?" | ./hsh 
./hsh: 1: fsdfsdf\necho: not found
and it should execute
if i delete it:-
it does not exexute the echo $? with the right number 127 .
echo -e "fsdfsdf\necho $?" | ./hsh 
./hsh: 1: fsdfsdf: not found
0
so it give me a problem passing the value of the previous status value to the echo $? case 

/**
* handle_variables - handle echo $$ and echo $?
* @error_info: the struct has the error information
* @original_pid: the original pid
*/
void handle_variables(error_h_t *error_info, pid_t original_pid)
{
	int i;

	for (i = 0; error_info->argv[i] != NULL; i++)
	{
		/* Handle $? variable */
		if (_strcmp(error_info->argv[i], "$?") == 0)
		{
			free(error_info->argv[i]);
			error_info->argv[i] = intToString_2(error_info->status);
		}
		/* Handle $$ variable */
		else if (_strcmp(error_info->argv[i], "$$") == 0)
		{
			char pid_str[10];

			pidToString(original_pid, pid_str, sizeof(pid_str));
			free(error_info->argv[i]);
			error_info->argv[i] = _strdup(pid_str);
		}
		/* Handle other environment variables starting with $*/
		else if (error_info->argv[i][0] == '$' && error_info->argv[i][1] != '\0')
		{
			char *variable = NULL;
			size_t len = _strlen(error_info->argv[i]) - 1;
			char *newstr;
			int escape = 1;

			newstr = (char *)malloc(len + 2);
			_strncpy(newstr, error_info->argv[i] + escape, len + 1);
			newstr[len + 1] = '\0';  /* Null-terminate the string */
			variable = _getenv(newstr), free(error_info->argv[i]);
			if (variable != NULL && variable[0] != '\0')
				error_info->argv[i] = _strdup(variable);
			else
				error_info->argv[i] = _strdup("");
			free(newstr);
			free(variable);
		}
	}
}
void execute_with_child(error_h_t *error_info)
{
	pid_t child_pid;


	child_pid = fork();
	if (child_pid == -1)
	{
		perror("Error");
		return;
	}
	if (child_pid == 0)
	{
		handle_variables(error_info, get_original_pid());
		if (execve(error_info->path, error_info->argv, environ_copy()) == -1)
		{
			if (errno == EACCES)
				error_info->status = (126), exit(126);
			error_info->status = (1), exit(1);
		}
	}
	else
	{
		wait(&(error_info->status));
		if (WIFEXITED(error_info->status))
		{
			error_info->status = WEXITSTATUS(error_info->status);
			if (error_info->status == 126)
				printerr(error_info, "Permission denied");
		}
	}
}
	read = getline(&line, &len, stdin);
	int previous_status = 0
	while (1)
	{
		
		if (read == -1)
		{
			/* Check for end of file */
			if (feof(stdin))
			{
				break;
			}
			else
			{
				perror("getline");
				free(line);
				exit(EXIT_FAILURE);
			}
		}
			/*-----------remove the comment*/
			if (read > 0)
				rm_comments(line, &read);
			/*-------------------------------*/
			if (is_empty_or_whitespace(line))
			{
				/* Skip processing for empty/whitespace lines */
				continue;
			}
			if (strcmp(line, "echo $?") == 0)
			{
           		 printf("%d\n", previous_status);
				 free(line);
				 exit(error_info->status);
			}
			else 
				 processes(line, error_info);
			read = getline(&line, &len, stdin);
	}
	free(line);
}