#include "main.h"
/**
* handle_and_commands - handle the and commands
* @command: the command
* @error_info: the error info struct
*/
void handle_logical_operators(char *command, error_h_t *error_info)
{
	int num_tokens, builtins, i, j;

	char **commands;
	char *subcommand;
	char **argv;
	int num_subtokens;

	commands = split_commands(command, &num_tokens, "&&");

	for (i = 0; i < num_tokens; i++)
	{
		subcommand = commands[i];

		if (strstr(subcommand, "||") != NULL)
		{
			char **or_commands = split_commands(subcommand, &num_subtokens, "||");

			for (j = 0; j < num_subtokens; j++)
			{
				char *or_subcommand = or_commands[j];
				tokenize_command(or_subcommand, &argv, &num_subtokens, error_info);
				builtins = execute_builtins(argv, num_subtokens, error_info, or_subcommand, or_commands, num_subtokens);
				
				if (builtins != 0)
				{
					search_command(error_info);
				}
				cleanup_memory(argv, num_subtokens, error_info);
				
				if (error_info->status == 0)
				{
					break;
				}

			}
			free_commands(or_commands, num_subtokens);
		}
		else
		{
			tokenize_command(subcommand, &argv, &num_subtokens, error_info);
			builtins = execute_builtins(argv, num_subtokens, error_info, subcommand, commands, num_tokens);
			
			if (builtins != 0)
			{
				search_command(error_info);
			}
			cleanup_memory(argv, num_subtokens, error_info);

			if (error_info->status != 0)
			{
				break;
			}
		}
	}
	free_commands(commands, num_tokens);
}